mixin propertyValue(type)
    if type.name === "arrayOf" || type.name === "objectOf"
        | #{type.name}[!{type.value.name}]
    else if type.name === "instanceOf"
        | instanceOf(!{type.value})
    else
        | #{type.name}

mixin propertyValues(props)
    - var list = props.length ? props : [props]
    each value, index in list
        +propertyValue(value)
        | #{(index < list.length - 1) ? '|' : ''}

mixin property(name, value)
    |   #{name}={
    +propertyValues(value)
    | }

- var hasChildren = false;
| <#{displayName}
|
each key, index in Object.keys(props)
    if key === "children"
        - hasChildren = true;
    else
        if props[key].type.name === "union"
            |   #{key}={union[
            +propertyValues(props[key].type.value)
            | }]
        else
            +property(key, props[key].type)
        if index !== (Object.keys(props).length -1)
            |
            |
if hasChildren === true
    | >
    | {children}
    | </#{displayName}>
else
    | />

