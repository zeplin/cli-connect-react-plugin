// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`Connected Components React Plugin - TypeScript Using react-docgen TSComponent.tsx snippet creation 1`] = `
Object {
  "description": "General component description.",
  "lang": "tsx",
  "snippet": "<MyComponent />",
}
`;

exports[`Connected Components React Plugin - TypeScript Using react-docgen TSComponentWithChildren.tsx snippet creation 1`] = `
Object {
  "description": "General component description.",
  "lang": "tsx",
  "snippet": "<MyComponent>
  {children}
</MyComponent>",
}
`;

exports[`Connected Components React Plugin - TypeScript Using react-docgen TSComponentWithChildrenAndProps.tsx snippet creation 1`] = `
Object {
  "description": "General component description.",
  "lang": "tsx",
  "snippet": "<MyComponent
  message={string}
  count={number}
  disabled={boolean}
  names={string[]}
  status={\\"waiting\\" | \\"success\\"}
  obj={object}
  obj2={{}}
  obj3={{
  id: string;
  title: string;
}}
  objArr={{
  id: string;
  title: string;
}[]}
  onSomething={Function}
  onClick={(event: React.MouseEvent<HTMLButtonElement>) => void}
  onChange={(id: number) => void}
  optional={OptionalType}>
  {children}
</MyComponent>",
}
`;

exports[`Connected Components React Plugin - TypeScript Using react-docgen TSComponentWithImport.tsx snippet creation 1`] = `
Object {
  "description": "General component description.",
  "lang": "tsx",
  "snippet": "<MyComponent
  message={string}>
  {children}
</MyComponent>",
}
`;

exports[`Connected Components React Plugin - TypeScript Using react-docgen TSComponentWithProps.tsx snippet creation 1`] = `
Object {
  "description": "General component description.",
  "lang": "tsx",
  "snippet": "<MyComponent
  message={string}
  count={number}
  disabled={boolean}
  names={string[]}
  status={\\"waiting\\" | \\"success\\"}
  obj={object}
  obj2={{}}
  obj3={{
  id: string;
  title: string;
}}
  objArr={{
  id: string;
  title: string;
}[]}
  onSomething={Function}
  onClick={(event: React.MouseEvent<HTMLButtonElement>) => void}
  onChange={(id: number) => void}
  optional={OptionalType} />",
}
`;

exports[`Connected Components React Plugin - TypeScript Using react-docgen-typescript TSComponent.tsx snippet creation 1`] = `
Object {
  "description": "General component description.",
  "lang": "tsx",
  "snippet": "<TSComponent />",
}
`;

exports[`Connected Components React Plugin - TypeScript Using react-docgen-typescript TSComponentWithChildren.tsx snippet creation 1`] = `
Object {
  "description": "General component description.",
  "lang": "tsx",
  "snippet": "<TSComponentWithChildren />",
}
`;

exports[`Connected Components React Plugin - TypeScript Using react-docgen-typescript TSComponentWithChildrenAndProps.tsx snippet creation 1`] = `
Object {
  "description": "General component description.",
  "lang": "tsx",
  "snippet": "<TSComponentWithChildrenAndProps
  message={string}
  count={number}
  disabled={boolean}
  names={string[]}
  status={'waiting' | 'success'}
  obj={object}
  obj2={{}}
  obj3={{ id: string; title: string; }}
  objArr={{ id: string; title: string; }[]}
  onSomething={Function}
  onClick={(event: MouseEvent<HTMLButtonElement, MouseEvent>) => void}
  hele={(event: MouseEvent<HTMLButtonElement, MouseEvent>) => void}
  onChange={(id: number) => void}
  optional={OptionalType} />",
}
`;

exports[`Connected Components React Plugin - TypeScript Using react-docgen-typescript TSComponentWithImport.tsx snippet creation 1`] = `
Object {
  "description": "General component description.",
  "lang": "tsx",
  "snippet": "<TSComponentWithImport
  other={string}
  message={string} />",
}
`;

exports[`Connected Components React Plugin - TypeScript Using react-docgen-typescript TSComponentWithProps.tsx snippet creation 1`] = `
Object {
  "description": "General component description.",
  "lang": "tsx",
  "snippet": "<TSComponentWithProps
  message={string}
  count={number}
  disabled={boolean}
  names={string[]}
  status={'waiting' | 'success'}
  obj={object}
  obj2={{}}
  obj3={{ id: string; title: string; }}
  objArr={{ id: string; title: string; }[]}
  onSomething={Function}
  onClick={(event: MouseEvent<HTMLButtonElement, MouseEvent>) => void}
  onChange={(id: number) => void}
  optional={OptionalType} />",
}
`;
